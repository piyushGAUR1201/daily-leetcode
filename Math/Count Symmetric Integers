There can be more than one solutions:
First:
You can iterate from low to high and check if the number is even && sum(firsthalf) == sum(seconhalf) then increase count ->CODE:
class Solution {
    public static int digits(int n){
        int temp = n;
        int count =0;
        while(temp>0){
            temp/=10;
            count++;
        }
        return count;
    }
    public int countSymmetricIntegers(int low, int high) {
        int cnt =0;
        for(int i =low;i<=high;i++){
            int n = digits(i);
            int tempo = i;
            if(n%2==0){
                int t = n/2;
                int sum1 =0;
                int sum2 =0;
                while(t>0){
                    sum1+=tempo%10;
                    tempo/=10;
                    t--;
                }
                while(tempo>0){
                    sum2+=tempo%10;
                    tempo/=10;
                }
            if(sum1 == sum2) cnt++;
            }
        }
        return cnt;
    }
}

Another solution is to decrease computions by using math to find digits of the number and also use 
some common sense as the max number can be 9999 only->
Code:
class Solution {
    public int countSymmetricIntegers(int low, int high) {
        int cnt=0;
        for(int i=low;i<=high;i++){
            if(i<100 && i%11==0){
                cnt++;
            }else if(1000<=i && i < 10000){
                int left=i/1000+(i%1000)/100;
                int right = (i % 100) / 10 + (i % 10);
                if (left == right) {
                    cnt++;
                }
            }
        }
        return cnt;
    }
}
