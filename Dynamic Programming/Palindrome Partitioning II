//MEMORIZATION APPROACH (OPTIMIZED BUT NOT FASTEST)
// class Solution {
//     static int[] dp;
//     public int minCut(String s) {
//         int n = s.length();
//         dp = new int[n+1];
//         Arrays.fill(dp, -1);
//         int i = 0;
//         int j =n-1;
//         return helper(i, j, s);
//     }
//     static int helper(int i, int j , String s){
//         if(i>=j) return 0;
//         if(palindrome(s, i, j)) return 0 ;
//         int ans =Integer.MAX_VALUE;
//         if(dp[i]!=-1) return dp[i];
//         for(int k=i;k<j;k++){
//             int temp =0;
//             if(palindrome(s,i, k)){
//                 int r1 =helper(k+1,j, s);
//                 temp = 1 + r1 ;
//                 ans = Math.min(ans, temp);
//             }
//         }
//         return dp[i] = ans;
//     }
//     static boolean palindrome(String s, int i, int j){
//         if(i>=j) return true;
//         while (i < j) {
//             if (s.charAt(i) != s.charAt(j)) return false;
//             i++;
//             j--;
//         }
//         return true;    
//     }
// }

//TABULATION APPROACH:
class Solution {
    public int minCut(String s) {
        char[] seq = s.toCharArray();
        int n = seq.length;
        int[] dp = new int[n + 1];
        for (int i = 0; i <= n; ++i) {
            dp[i] = i - 1;
        }
        for (int i = 1; i <= n; ++i) {
            int lo = i - 1;
            int prev = dp[i - 1];
            dp[i] = Math.min(dp[i], prev + 1);
            while (i < n && seq[i] == seq[i - 1]) {
                i++;
                prev = Math.min(prev, dp[i - 1]);
                dp[i] = Math.min(dp[i], prev + 1);
            }
            int hi = i + 1;
            while (lo > 0 && hi <= n && seq[lo - 1] == seq[hi - 1]) {
                dp[hi] = Math.min(dp[hi], dp[lo - 1] + 1);
                lo--;
                hi++;
            }
        }
        return dp[n];
    }
}
